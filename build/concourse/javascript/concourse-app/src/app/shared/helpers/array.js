"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sample = (arr, size) => {
    const shuffled = arr.slice(0);
    let i = arr.length;
    let tmp;
    let index;
    while (i--) {
        index = Math.floor((i + 1) * Math.random());
        tmp = shuffled[index];
        shuffled[index] = shuffled[i];
        shuffled[i] = tmp;
    }
    return shuffled.slice(0, size);
};
/**
 * Chunks an array into an array of arrays with desired number of chunks
 * Will prefer to split input evenly into chunkCount, if possible.
 * @param input - Array to be chunked
 * @param chunkCount - Desired number of chunks
 * @returns An array of arrays of the same type as input
 */
exports.chunks = (input, chunkCount) => {
    if (chunkCount < 2) {
        return [input];
    }
    const len = input.length;
    const output = [];
    let i = 0;
    let size;
    if (len % chunkCount === 0) {
        size = Math.floor(len / chunkCount);
        while (i < len) {
            output.push(input.slice(i, i += size));
        }
    }
    else {
        while (i < len) {
            size = Math.ceil((len - i) / chunkCount--);
            output.push(input.slice(i, i += size));
        }
    }
    return output;
};
exports.difference = (a1, a2, eq) => a1.filter(e1 => a2.findIndex(e2 => eq(e1, e2)) < 0);
exports.intersection = (a1, a2, eq) => a1.filter(e1 => a2.some(e2 => eq(e1, e2)));
exports.flattenDeep = (arr1) => arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(exports.flattenDeep(val)) : acc.concat(val), []);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9jb25jb3Vyc2UvamF2YXNjcmlwdC9jb25jb3Vyc2UtYXBwL3NyYy9hcHAvc2hhcmVkL2hlbHBlcnMvYXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBYSxRQUFBLE1BQU0sR0FBRyxDQUFDLEdBQVUsRUFBRSxJQUFZLEVBQVMsRUFBRTtJQUN4RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDbkIsSUFBSSxHQUFRLENBQUM7SUFDYixJQUFJLEtBQWEsQ0FBQztJQUNsQixPQUFPLENBQUMsRUFBRSxFQUFFO1FBQ1YsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDNUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDbkI7SUFDRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUVGOzs7Ozs7R0FNRztBQUNVLFFBQUEsTUFBTSxHQUFHLENBQUksS0FBVSxFQUFFLFVBQWtCLEVBQVMsRUFBRTtJQUNqRSxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUU7UUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hCO0lBRUQsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUN6QixNQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7SUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsSUFBSSxJQUFZLENBQUM7SUFFakIsSUFBSSxHQUFHLEdBQUcsVUFBVSxLQUFLLENBQUMsRUFBRTtRQUMxQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN4QztLQUNGO1NBQU07UUFDTCxPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUU7WUFDZCxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDeEM7S0FDRjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVXLFFBQUEsVUFBVSxHQUFHLENBQU8sRUFBTyxFQUFFLEVBQU8sRUFBRSxFQUE0QixFQUFPLEVBQUUsQ0FDdEYsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFekMsUUFBQSxZQUFZLEdBQUcsQ0FBTyxFQUFPLEVBQUUsRUFBTyxFQUFFLEVBQTJCLEVBQU8sRUFBRSxDQUN2RixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsV0FBVyxHQUFHLENBQUMsSUFBUyxFQUFTLEVBQUUsQ0FDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsbUJBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDIn0=