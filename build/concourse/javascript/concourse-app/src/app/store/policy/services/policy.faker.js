"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const faker = require("faker/locale/en_US");
const models_1 = require("@concourse/core/models");
const helpers_1 = require("@concourse/shared/helpers");
const catalog_service_faker_1 = require("@concourse/store/catalog-service/services/catalog-service.faker");
const APPROVAL_EVENT_TYPE = ['CREATE', 'UPDATE', 'DELETE', 'PUBLISH'];
const ENTITY_TYPE = ['POLICY_GROUP', 'DEPLOYMENT', 'MODEL'];
// the attribute value(s) is always stored in Json Array.
const randomAttributeValues = (attributeType, groups, surfaceLayers) => {
    const array = [];
    switch (attributeType) {
        case 'ALLOW':
            array.push(faker.random.arrayElement(['DISALLOW', 'ALLOW']));
            return JSON.stringify(array);
        case 'AWS_REGION':
            const regionList = helpers_1.sample(catalog_service_faker_1.awsRegion, faker.random.number({ min: 1, max: catalog_service_faker_1.awsRegion.length }));
            for (const region of regionList) {
                array.push(region.region);
            }
            return JSON.stringify(array);
        case 'AWS_SERVICE':
            const serviceList = helpers_1.sample(catalog_service_faker_1.awsProducts, faker.random.number({ min: 1, max: catalog_service_faker_1.awsProducts.length }));
            for (const service of serviceList) {
                array.push(service.serviceName);
            }
            return JSON.stringify(array);
        case 'APPROVAL_GROUP':
            const approvalGroupIdsList = helpers_1.sample(groups, faker.random.number({ min: 1, max: groups.length }));
            for (const group of approvalGroupIdsList) {
                array.push(group.id);
            }
            return JSON.stringify(array);
        case 'ENTITY':
            array.push(faker.random.arrayElement(ENTITY_TYPE));
            return JSON.stringify(array);
        case 'EVENT':
            array.push(faker.random.arrayElement(APPROVAL_EVENT_TYPE));
            return JSON.stringify(array);
        case 'SURFACE_LAYER':
            array.push(faker.random.arrayElement(surfaceLayers).id);
            return JSON.stringify(array);
        case 'CONNECTION_SPECIFICATION':
            const networkProtocol = faker.random.arrayElement(catalog_service_faker_1.networkProtocols);
            const connectionSpec = {
                name: faker.hacker.noun(),
                allowed: faker.random.arrayElement(['DISALLOW', 'ALLOW']),
                direction: faker.random.arrayElement(['INCOMING', 'OUTGOING', 'BIDIRECTIONAL']),
                tag: faker.hacker.verb(),
                protocolName: networkProtocol.protocolName,
                ports: networkProtocol.requirePorts ? '80:80' : ''
            };
            array.push(connectionSpec);
            return JSON.stringify(array);
        default:
            const count = faker.random.number({ min: 1, max: 5 });
            for (let i = 0; i < count; i++) {
                array.push(faker.hacker.noun());
            }
            return JSON.stringify(array);
    }
};
exports.fakeOne = (policyTemplate, userGroups, surfaceLayers, i = 0) => (new models_1.Policy().deserialize({
    created: faker.date.recent(),
    updated: faker.date.recent(),
    version: faker.random.number(5),
    institutionId: 1001,
    id: (i * 10) + 20001,
    createdBy: 1001,
    updatedBy: 1001,
    name: faker.hacker.adjective(),
    policyTemplate,
    attributeValues: policyTemplate.attributes.map((attribute, index) => ({
        created: faker.date.recent(),
        updated: faker.date.recent(),
        version: faker.random.number(5),
        id: (i + index * 10) + 40001,
        attribute: { id: attribute.id, type: attribute.type },
        policy: { id: (i * 10) + 20001 },
        value: randomAttributeValues(attribute.type, userGroups, surfaceLayers) || `["${faker.hacker.noun()}"]`
    }))
}));
exports.fakeMany = (policyTemplates, groups, surfaceLayers) => policyTemplates.reduce((policies, policyTemplate) => {
    const count = faker.random.number({ min: 2, max: 10 });
    for (let i = 0; i < count; i++) {
        // tslint:disable-next-line:no-parameter-reassignment
        policies = [...policies, exports.fakeOne(policyTemplate, groups, surfaceLayers, i + (policies.length + 1))];
    }
    return policies;
}, []);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LmZha2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vY29uY291cnNlL2phdmFzY3JpcHQvY29uY291cnNlLWFwcC9zcmMvYXBwL3N0b3JlL3BvbGljeS9zZXJ2aWNlcy9wb2xpY3kuZmFrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNEM7QUFFNUMsbURBTWdDO0FBQ2hDLHVEQUFtRDtBQUNuRCwyR0FBMkg7QUFFM0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RFLE1BQU0sV0FBVyxHQUFHLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUU1RCx5REFBeUQ7QUFDekQsTUFBTSxxQkFBcUIsR0FBRyxDQUM1QixhQUE0QixFQUM1QixNQUFnQixFQUNoQixhQUE4QixFQUM5QixFQUFFO0lBQ0YsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFDO0lBQ3hCLFFBQVEsYUFBYSxFQUFFO1FBQ3JCLEtBQUssT0FBTztZQUNWLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUvQixLQUFLLFlBQVk7WUFDZixNQUFNLFVBQVUsR0FBRyxnQkFBTSxDQUFDLGlDQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxpQ0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3RixLQUFLLE1BQU0sTUFBTSxJQUFJLFVBQVUsRUFBRTtnQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxN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