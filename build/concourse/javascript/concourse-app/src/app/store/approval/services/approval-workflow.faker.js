"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const faker = require("faker/locale/en_US");
const models_1 = require("@concourse/core/models");
const helpers_1 = require("@concourse/shared/helpers");
const APPROVAL_ACTION_TYPES = ['APPROVE', 'REJECT', 'ASSIGN', 'UNASSIGN', 'COMMENT'];
const APPROVAL_REQUEST_STATUS = ['CREATED', 'IN_EXECUTION', 'APPROVED', 'REJECTED', 'CANCELLED', 'IN_EXCEPTION'];
const APPROVAL_TYPES = ['PEER', 'MANAGER', 'FINANCE'];
const ENTITY_TYPES = ['APPLICATION', 'POLICY_GROUP', 'DEPLOYMENT', 'MODEL', 'BASELINE', 'LOGICAL_BASELINE_DEPLOYMENT'];
const PRIORITY = ['UNSPECIFIED', 'HIGH', 'MEDIUM', 'LOW'];
const APPROVAL_EVENT_TYPE = ['CREATE', 'UPDATE', 'DELETE', 'PUBLISH'];
const createAction = (id, groupIds, userIds, approvalRequestId) => {
    const createdBy = faker.random.arrayElement(userIds);
    return new models_1.ApprovalAction().deserialize({
        created: faker.date.past(),
        updated: faker.date.recent(2),
        version: faker.random.number(5),
        id,
        comment: faker.lorem.sentences(faker.random.number({ min: 1, max: 3 })),
        type: faker.random.arrayElement(APPROVAL_ACTION_TYPES),
        assignedGroupId: faker.random.arrayElement(groupIds),
        assignedUserId: faker.random.arrayElement(userIds),
        approvalRequest: approvalRequestId,
        createdBy,
        updatedBy: createdBy
    });
};
exports.fakeOne = (users, i = 0) => {
    const id = i + 10001;
    const userIds = users.map(u => u.id);
    const approvalActions = [];
    for (let index = 0; index < faker.random.number(8); index++) {
        approvalActions.push(createAction((i * index) + 20001, [0], userIds, id));
    }
    return new models_1.ApprovalRequest().deserialize({
        id,
        approvalActions,
        approvalDate: faker.date.recent(30),
        approvalGroupIds: [1001, 1002],
        approvalRequestStatus: faker.random.arrayElement(APPROVAL_REQUEST_STATUS),
        approvalType: faker.random.arrayElement(APPROVAL_TYPES),
        approvalUserIds: helpers_1.sample(userIds, 3),
        approverId: id % 3 ? faker.random.arrayElement(userIds) : undefined,
        assigneeId: faker.random.arrayElement(userIds),
        created: faker.date.past(),
        eventType: faker.random.arrayElement(APPROVAL_EVENT_TYPE),
        institutionId: 1001,
        justification: '',
        priority: faker.random.arrayElement(PRIORITY),
        processInstanceId: i + 51660,
        requestEntityId: i + 10001,
        requestEntityType: faker.random.arrayElement(ENTITY_TYPES),
        requesterId: faker.random.arrayElement(userIds),
        updated: faker.date.recent(2),
        version: faker.random.number(10),
        watchGroupIds: [],
        watchUserIds: []
    });
};
exports.fakeMany = (users) => {
    const approvalRequests = [];
    for (let index = 0; index < faker.random.number({ min: 2, max: 25 }); index++) {
        approvalRequests.push(exports.fakeOne(users, index));
    }
    return approvalRequests;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwcm92YWwtd29ya2Zsb3cuZmFrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9jb25jb3Vyc2UvamF2YXNjcmlwdC9jb25jb3Vyc2UtYXBwL3NyYy9hcHAvc3RvcmUvYXBwcm92YWwvc2VydmljZXMvYXBwcm92YWwtd29ya2Zsb3cuZmFrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNEM7QUFFNUMsbURBVWdDO0FBQ2hDLHVEQUFtRDtBQUVuRCxNQUFNLHFCQUFxQixHQUF5QixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzRyxNQUFNLHVCQUF1QixHQUE0QixDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDMUksTUFBTSxjQUFjLEdBQW1CLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN0RSxNQUFNLFlBQVksR0FBaUIsQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLDZCQUE2QixDQUFDLENBQUM7QUFDckksTUFBTSxRQUFRLEdBQWUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RSxNQUFNLG1CQUFtQixHQUF3QixDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRTNGLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBVSxFQUFFLFFBQWtCLEVBQUUsT0FBaUIsRUFBRSxpQkFBeUIsRUFBa0IsRUFBRTtJQUNwSCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxPQUFPLElBQUks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